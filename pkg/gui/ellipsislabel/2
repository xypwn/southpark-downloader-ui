package ellipsislabel

import (
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

type EllipsisLabel struct {
	widget.BaseWidget

	text string
	content *widget.RichText
}

func NewEllipsisLabel(text string) *EllipsisLabel {
	res := &EllipsisLabel {
		text: text,
		content: widget.NewRichTextWithText(text),
	}
	res.ExtendBaseWidget(res)
	return res
}

func (el *EllipsisLabel) CreateRenderer() fyne.WidgetRenderer {
	el.ExtendBaseWidget(el)
	res := &ellipsisLabelRenderer {
		ellipsisLabel: el,
		objects: []fyne.CanvasObject{el.content},
	}
	return res
}

type ellipsisLabelRenderer struct {
	ellipsisLabel *EllipsisLabel
	objects []fyne.CanvasObject
}

func (r *ellipsisLabelRenderer) Destroy() {
}

func (r *ellipsisLabelRenderer) Layout(size fyne.Size) {
	newText := ellipsizeToWidth(r.ellipsisLabel.text, size.Width, "...", r.objects[0].)
	r.ellipsisLabel.content.Segments[0].(*widget.TextSegment).Text = newText
	r.objects[0].Resize(size)
	r.objects[0].Refresh()
}

func (r *ellipsisLabelRenderer) MinSize() fyne.Size {
	return fyne.NewSize(0, r.objects[0].MinSize().Height)
}

func (r *ellipsisLabelRenderer) Refresh() {
	r.objects[0].Refresh()
}

func (r *ellipsisLabelRenderer) Objects() []fyne.CanvasObject {
	return r.objects
}

func ellipsizeToWidth(text string, width float32, ellipsis string, style fyne.TextStyle) string {
	width := func(i int) float32 {
		return fyne.MeasureText(text[:i] + ellipsis, theme.TextSize(), style).Width
	}

	if width(len(text)) <= target {
		return text
	}

	min := 0
	max := len(text)
	for min <= max {
		mid := (min + max) / 2
		midWidth := width(mid)
		if target < midWidth {
			max = mid - 1
		} else if target > midWidth {
			min = mid + 1
		} else {
			min = mid
			break
		}
	}
	if min - 1 < len(ellipsis) {
		return ellipsis
	}
	return text[:min-1-len(ellipsis)] + ellipsis
}
